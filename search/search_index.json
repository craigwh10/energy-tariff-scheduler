{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Energy Tariff Scheduler","text":"<p>This is designed to help users easily leverage pricing data provided by Energy Suppliers. It enables scheduled smart actions on connected devices when prices are particularly low or high, simplifying the process of optimizing energy usage in your home.</p> <p>The library will work for people who just want to plug and play and kick off with the preconfigured price strategies, or if you want, you can provide your own strategy.</p>"},{"location":"#what-are-tariffs","title":"What are tariffs","text":"<p>Tariffs are what Energy Suppliers use to offer pricing options for your electricity usage, these vary between suppliers are specialised to what type of customer you are, such as the Octopus Agile Tariff is set up in a way for people who are concious of the changes in prices throughout the day, allowing them to plan around these.</p>"},{"location":"#do-prices-even-change-that-much","title":"Do prices even change that much?","text":"<p>Yes they do, the prices are driven by supply and demand throughout the day, such as when people are awake or asleep, or fluctuations in generation such as it being windy during the day leading to cheaper electricity from renewable sources.</p> <p>Here's an example of 11 days and a schedule generated from this library for Octopus Agile tariff, for a battery being charged under constant load:</p> <p></p> <p>Source: Linkedin - Craig White</p>"},{"location":"#current-supported-supplier-tariffs","title":"Current supported supplier tariffs","text":"<ul> <li>Octopus Agile Tariff</li> <li>Octopus Go (EV Tariff)</li> <li>Intelligent Octopus Go (Optimised EV Tariff)</li> </ul>"},{"location":"#prospective-supplier-tariffs","title":"Prospective supplier tariffs","text":"<ul> <li>Octopus Tracker</li> <li>E.ON Next Flex</li> <li>EDF GoElectric Overnight</li> <li>EDF \"Beat the Peak\"</li> </ul>"},{"location":"#example-usage","title":"Example usage","text":"<p>If you want to be featured on here make a post on Show &amp; Tell and I'll get it listed here :)</p> <ul> <li>battery.craigwh.it: Raspberry Pi4b using smart scheduling to do battery arbitrage to try keep a server online</li> </ul>"},{"location":"#related-links","title":"Related links","text":"<ul> <li>https://github.com/craigwh10/energy-tariff-scheduler</li> </ul> Next \u2192"},{"location":"common-problems/","title":"Common problems","text":""},{"location":"common-problems/#highly-common-im-not-seeing-any-logs","title":"[Highly common] I'm not seeing any logs","text":"<p>This is likely due to not having configured your logger in your python script, follow the example below:</p> <pre><code>import logging\n\nfrom energy_tariff_scheduler import PricingStrategy, Price, runner\n\nlogging.getLogger(\"energy_tariff_scheduler\").setLevel(logging.INFO)\n</code></pre>"},{"location":"common-problems/#possibly-common-octopus-the-runner-is-using-the-incorrect-product-and-prices","title":"[Possibly common] Octopus: The runner is using the incorrect product and prices","text":"<p>Currently the logic for finding your tariff is it fetches your account details from your provided account number, finds your most recent tariff, gets the tariff code for it and then tries its best to match the closest product code from the current active products provided by Octopus (where they are non-business type and within Octopus brand), here it's assumed that the product code contains as many characters as possible in the tariff code, such as if your tariff code is <code>E-1R-AGILE-FLEX-22-11-25-C</code> if a product doesn't exist for this it may match <code>AGILE-24-10-01</code>.</p> <p>Obviously this isn't foolproof and a big assumption has been made here so expect it to fail, and if it does please raise it on the API issues page and provide relevant logs provided under the <code>DEBUG</code> level, an effort has been made to not log out any sensitive data but please be vigilant not to post any in the case of seeing any.</p>"},{"location":"common-problems/#my-tariff-isnt-supported","title":"My tariff isn't supported","text":"<p>If you hit this problem you should see this error (note the mismatch in the tariff and product that has been found):</p> <pre><code>INFO:root:Latest tariff code: E-1R-VAR-22-11-01-M\nDEBUG:urllib3.connectionpool:https://api.octopus.energy:443 \"GET /v1/products/AGILE-24-10-01/electricity-tariffs/E-1R-VAR-22-11-01-M/standard-unit-rates/?period_from=2025-01-03T00:00:00&amp;period_to=2025-01-03T23:00:00 HTTP/1.1\" 404 58\nThe tariff code you are on isn't supported by this script, please read https://craigwh10.github.io/energy-tariff-scheduler/common-problems/#possibly-common-octopus-the-runner-isnt-finding-my-tariff-or-product\n</code></pre> <p>For the example referenced, the debug level is set as <code>DEBUG</code>.</p>"},{"location":"common-problems/#less-common-the-runner-wont-start-because-of-the-api-not-returning-data","title":"[Less common] The runner wont start because of the API not returning data","text":"<p>This library is build around third party API's, these can fail due to many reasons which are out of this libraries control.</p> <p>I wouldn't reccomend spam retrying the script as this could lead to your IP being blacklisted, the script automatically tries to retry the failed call 3 times (with a 10s delay), it could take upwards of a few days for things to get rectified (as it's people on the other end who need to fix it), so just be patient with it and try every hour or so.</p> <p>Also, when you see this happen be sure to start a discussion on the API issues page to make others aware that this is happening and to help with making the solution more resiliant to these sorts of issues.</p>"},{"location":"quick-start-rpi/","title":"Quick guide: Raspberry Pi smart plug control using Library","text":"<p>This guide should get you started with the library allowing you to see some actions happening in relation to price.</p>"},{"location":"quick-start-rpi/#requirements","title":"Requirements","text":"<ul> <li>Raspberry Pi that is WIFI enabled and supports CPython, a good option is a RPI 2W Pico which you can get for around \u00a325 online.</li> <li>Are on either Octopus Go, Intelligent Octopus Go or Agile Octopus tariff</li> </ul>"},{"location":"quick-start-rpi/#initial-setup","title":"Initial setup","text":"<ul> <li>Connect raspberry pi to laptop</li> <li>Connect a micro-hdmi to an external screen from the raspberry pi</li> <li>Run setup, remembering your password</li> <li>Connect to same WIFI your laptop is on</li> </ul>"},{"location":"quick-start-rpi/#setting-up-your-application","title":"Setting up your application","text":"<ul> <li>Once it is finished, let the boot sequence run till you see a desktop</li> <li>Open \"Terminal\"</li> <li>Type <code>python -v</code>, press enter and check if you are &gt;= 3.10 as this is needed for the package</li> <li>Type <code>touch run.py &amp;&amp; touch .env</code></li> <li>Be sure never to publish .env online or share it with anyone!</li> <li>Type <code>pip install energy-tariff-scheduler python-dotenv requests</code>, press enter and let it run, it's okay to install globally on RPI's if you're only running the one thing</li> <li>If you aren't, look into python virtual environments</li> </ul>"},{"location":"quick-start-rpi/#configuring-your-application","title":"Configuring your application","text":"<ul> <li>Go back to the desktop once this is complete, and right click <code>.env</code> and open with text editor</li> </ul> <p>Info</p> <ul> <li>Please refer to your smart plug app/documentation on how to get the IP address</li> <li>Getting your account number and API key is documented here.</li> </ul> <pre><code>OCTO_ACC_NO=YOUR-ACC-NUMBER\nOCTO_API_KEY=API_KEY\nSMART_DEVICE_IP=DEVICE_IP\n</code></pre> <ul> <li>Now save the .env file</li> <li>Now go back to the desktop and open the <code>run.py</code> file with your preferred editor (thawny programmer editor is a good default)</li> <li>Copy in the below starter code for your relevant tariff</li> </ul> <p>Info</p> <p>Please refer to your smart plug documentation on how to get the HTTP actions for switching on and off (lines 20 &amp; 24)</p> <ul> <li>Tapo: https://pypi.org/project/tapo/</li> <li>Shelly: https://shelly-api-docs.shelly.cloud/gen2/ComponentsAndServices/Switch/</li> </ul>"},{"location":"quick-start-rpi/#octopus-gointelligent-boilerplate","title":"Octopus Go/Intelligent Boilerplate","text":"<pre><code>import logging\nimport requests\n\nfrom energy_tariff_scheduler import Price, runner\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nOCTO_ACC_NO = os.getenv('OCTO_ACC_NO')\nOCTO_API_KEY = os.getenv('OCTO_API_KEY')\nSMART_PLUG_IP = os.getenv('SMART_PLUG_IP')\n\nlogging.getLogger().setLevel(logging.DEBUG)\n\nlogging.debug(\"starting\")\n\ndef switch_device_on_and_alert(price: Price):\n    logging.info(f\"Price is cheap: {price}\")\n    # CODE FOR YOUR SMART PLUG TO SWITCH ON\n\ndef switch_device_off_and_alert(price: Price):\n    logging.info(f\"Price is expensive: {price}\")\n    # CODE FOR YOUR SMART PLUG TO SWITCH OFF\n\nrunner.run_octopus_go_tariff_schedule(\n    action_when_cheap=switch_shelly_on_and_alert,\n    action_when_expensive=switch_shelly_off_and_alert,\n    api_key=OCTO_API_KEY,\n    account_number=OCTO_ACC_NO,\n    is_intelligent=True\n)\n</code></pre>"},{"location":"quick-start-rpi/#octopus-agile-boilerplate","title":"Octopus Agile Boilerplate","text":"<pre><code>import logging\nimport requests\n\nfrom energy_tariff_scheduler import Price, runner\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nOCTO_ACC_NO = os.getenv('OCTO_ACC_NO')\nOCTO_API_KEY = os.getenv('OCTO_API_KEY')\nSMART_PLUG_IP = os.getenv('SMART_PLUG_IP')\n\nlogging.getLogger().setLevel(logging.DEBUG)\n\nlogging.debug(\"starting\")\n\ndef switch_device_on_and_alert(price: Price):\n    logging.info(f\"Price is cheap: {price}\")\n    # CODE FOR YOUR SMART PLUG TO SWITCH ON\n\ndef switch_device_off_and_alert(price: Price):\n    logging.info(f\"Price is expensive: {price}\")\n    # CODE FOR YOUR SMART PLUG TO SWITCH OFF\n\nrunner.run_octopus_agile_tariff_schedule(\n    prices_to_include=24,\n    action_when_cheap=switch_shelly_on_and_alert,\n    action_when_expensive=switch_shelly_off_and_alert,\n    api_key=OCTO_API_KEY,\n    account_number=OCTO_ACC_NO,\n)\n</code></pre> Next \u2192"},{"location":"getting-started/custom-prices-to-include/","title":"Using custom price_to_include functions","text":"<p>As touched on in running first schedule page, this introduces the <code>number_to_include</code> configuration parameter, mentioning that it can either be a positive integer value or a custom function, this is going to show you how to use this method to select prices programmatically.</p> <p>The function must always return an integer otherwise it will fail, this integer is the number of prices the pricing strategy will act on.</p>"},{"location":"getting-started/custom-prices-to-include/#example-octopus-agile","title":"Example (Octopus Agile)","text":"<pre><code># main.py\nfrom energy_tariff_scheduler import runner, Price\n\ndef action_when_cheap(price: Price):\n    print(\"cheap\", price.value)\n\ndef action_when_expensive(price: Price)\n    print(\"expensive\", price.value)\n\ndef prices_to_include(prices: list[Price]):\n    # only get the count where sum cost is no greater than 15p/kWh\n    # e.g if first 4 prices are 3.0 + 5.0 + 3.0 + 4.0 = 15 (it wont include rest)\n\n    total = 0\n    count = 0\n    sorted_prices = sorted(prices, key=lambda obj: min(obj.value, obj.value))\n    for price in sorted_prices:\n        total += price.value\n        count += 1\n        if total &gt;= 15:\n            break \n\n    return count\n\n\nrunner.run_octopus_agile_tariff_schedule(\n    prices_to_include=prices_to_include,\n    action_when_cheap=action_when_cheap,\n    action_when_expensive=action_when_expensive,\n    api_key=\"YOUR-API-KEY\",\n    account_number=\"YOUR-ACCOUNT-NUMBER\"\n)\n</code></pre> <p>In this setup I've created a theoretical scenario where I only want to spend take advantage of 15p/kWh total of prices, and work out from the available prices how many prices that is, which the strategy will then use.</p> \u2190 Previous Next \u2192"},{"location":"getting-started/custom-pricing-strategies/","title":"Using custom pricing strategies","text":"<p>By default the scheduler will simply just rank the prices and assign them to the appropriate actions, but you might hit a case where you need something more complex than that, such as if you have a system where constraints are important or if you wanted to introduce another parameter to the scheduling, such as carbon intensity.</p>"},{"location":"getting-started/custom-pricing-strategies/#what-are-these","title":"What are these?","text":"<p>Custom pricing strategies are python classes that you define and pass into the method for the appropriate tariff, in these you can write your own functionality that acts on the prices, this is using a Strategy pattern which injects in the config in runtime so that you can use the values you addtionally passed in.</p> <p>For a description of the configuration you can pass in see configuration.</p>"},{"location":"getting-started/custom-pricing-strategies/#example-creating-a-custom-pricing-strategy-octopus-agile","title":"Example: creating a custom pricing strategy (Octopus Agile)","text":"<p>Here I'm going to set up a custom pricing strategy which makes sure:</p> <ul> <li>I don't ever spend more than 10p/kWh</li> <li>I only ever switch on my device if carbon intensity is below 100 units</li> </ul> <p>Additionally I'm going to set up some custom actions which:</p> <ul> <li>Send a text message to my phone telling me that my smart plug is being switched on (done via AWS SNS)</li> <li>Send a HTTP RPC request to my shelly on the same WIFI network to start and stop when this conditions are met</li> </ul> <p>Note</p> <p>It's important to note that in this example, that the custom pricing strategy <code>CustomPricingStrategy</code> inherits from <code>PricingStrategy</code>, this is necessary otherwise you will hit a validation error to ensure it meets the contract and works with the rest of the code.</p> <pre><code>from energy_tariff_scheduler import runner, Price, PricingStrategy, ScheduleConfig\n\nclass CustomPricingStrategy(PricingStrategy):\n    def __init__(self, config: ScheduleConfig):\n        self.config = config # for access to other set configuration\n\n    def _get_carbon_intensity(self, price: Price):\n        res = requests.get(f\"https://api.carbonintensity.org.uk/intensity/{price.datetime_from}\")\n        return res.json()[\"data\"][0][\"intensity\"][\"actual\"]\n\n    def handle_price(self, price: Price, prices: list[Price]):\n        if price.value &lt; 10 and self._get_carbon_intensity(price) &lt; 100:\n            self.config.action_when_cheap(price)\n        else:\n            self.config.action_when_expensive(price)\n\ndef switch_shelly_on_and_alert(price: Price):\n    time = price.datetime_from.strftime(\"%H:%M\")\n    SMS.send(f\"Price is cheap ({price}p/kWh), turning on shelly\")\n    requests.get(\"http://&lt;shelly_ip&gt;/relay/0?turn=on\")\n\ndef switch_shelly_off_and_alert(price: Price):\n    time = price.datetime_from.strftime(\"%H:%M\")\n    SMS.send(f\"Price is expensive ({price}p/kWh), turning off shelly\")    \n    requests.get(\"http://&lt;shelly_ip&gt;/relay/0?turn=off\")\n\nrunner.run_octopus_agile_tariff_schedule(\n    prices_to_include=5, # 5 opportunties to trigger \"action_when_cheap\"\n    action_when_cheap=switch_shelly_on_and_alert,\n    action_when_expensive=switch_shelly_off_and_alert,\n    pricing_strategy=CustomPricingStrategy,\n    api_key=\"YOUR-API-KEY\",\n    account_number=\"YOUR-ACCOUNT-NUMBER\"\n)\n</code></pre> \u2190 Previous"},{"location":"getting-started/getting-api-key-and-account-no/","title":"Getting API keys and account numbers","text":""},{"location":"getting-started/getting-api-key-and-account-no/#03012025-octopus-customers","title":"[03/01/2025] Octopus Customers","text":"<p>Go to octopus.energy and sign in, then follow these steps after clicking the menu button on the home page.</p> <p></p> <p></p> <p></p> <p></p> <p>Have both of these ready for the next section.</p> \u2190 Previous Next \u2192"},{"location":"getting-started/installation/","title":"Installation","text":"<p>First check that you have python installed on your machine:</p> <pre><code>python --version\n</code></pre> <p>If you do not then follow this guide or use your preferred manager such as homebrew.</p> <p>Given now you have python installed, use the following command to install the dependency on your machine (or in a virtual environment).</p> <pre><code>pip install energy-tariff-scheduler\n</code></pre> \u2190 Previous Next \u2192"},{"location":"getting-started/running-first-schedule/","title":"Running your first schedule","text":""},{"location":"getting-started/running-first-schedule/#configuration","title":"Configuration","text":"<ul> <li><code>prices_to_include</code> is the number of the cheapest half hourly periods that you want to include<ul> <li>this can be a function (as defined in custom prices to include)</li> <li>or simply just an integer value between <code>0</code> and <code>46</code> ( a full day 0:00-23:00)</li> </ul> </li> <li><code>action_when_cheap</code> is your function that is called when the half hourly period is among the cheapest</li> <li><code>action_when_expensive</code> is your function that is called when the half hourly period is more expensive than the cheapest</li> <li><code>pricing_strategy</code> is a custom class you can pass in to act on prices in a more complex way (this is covered in custom pricing strategies)</li> <li><code>api_key</code> a secret key that gives the script access to fetch your most recent tariff (do not push this to git or share with anyone)</li> <li><code>account_number</code> your account number for a supported supplier and tariff</li> </ul>"},{"location":"getting-started/running-first-schedule/#when-does-this-run","title":"When does this run?","text":"<p>You can kick off your schedule at any point in the day, and it will ignore the previous half hourly periods before then, once the schedule for the current day is completed then it will keep running, until you exit the program.</p> <p>This schedule is blocking, meaning code after the schedule will not be executed, so it's recommended to run this in isolated programs.</p>"},{"location":"getting-started/running-first-schedule/#setting-up-actions","title":"Setting up actions","text":"<p>In the library we have two available methods that you need to set, <code>action_when_cheap</code> and <code>action_when_expensive</code>, see below a simple example of how this is set up.</p> <pre><code># main.py\nfrom energy_tariff_scheduler import runner, Price\n\ndef action_when_cheap(price: Price):\n    print(\"cheap\", price.value)\n\ndef action_when_expensive(price: Price)\n    print(\"expensive\", price.value)\n\nrunner.run_octopus_agile_tariff_schedule(\n  prices_to_include=12,\n  action_when_cheap=action_when_cheap,\n  action_when_expensive=action_when_expensive,\n  api_key=\"YOUR-API-KEY\",\n  account_number=\"YOUR-ACCOUNT-NUMBER\"\n)\n</code></pre> <p>You can see here in this example that there are two function I have created, one that runs when the prices are cheap, which in this case will run a simple print in the 12 cheapest half hourly prices of the day and will run a simple print in the expensive other 44 periods of the day.</p> <p>You can change these methods to do whatever you like, a common example is using a smart plug HTTP API's to make them turn on and off during those periods.</p> <p>If you now run your script it will stay running and you should see changes happening based on your actions, and if you have logs set to <code>INFO</code> you should see some logs which indicate the progression of your schedule as well as the full schedule as shown below:</p> <p>Note</p> <p>To turn logs on ensure you <code>import logging</code> and set the level like this at the top of your code <code>logging.getLogger(\"energy_tariff_scheduler\").setLevel(logging.INFO)</code></p> <pre><code>INFO:root:\n\nTodays schedule (this includes already passed jobs):\n\n00:00, action: action_when_expensive, price: 0.0p/kWh\n00:30, action: action_when_expensive, price: 4.2p/kWh\n01:00, action: action_when_expensive, price: 0.0p/kWh\n01:30, action: action_when_cheap, price: -0.84p/kWh\n02:00, action: action_when_expensive, price: 0.21p/kWh\n02:30, action: action_when_cheap, price: -0.315p/kWh\n03:00, action: action_when_cheap, price: -0.0105p/kWh\n03:30, action: action_when_cheap, price: -1.365p/kWh\n04:00, action: action_when_cheap, price: 0.0p/kWh\n04:30, action: action_when_cheap, price: -0.84p/kWh\n05:00, action: action_when_cheap, price: -0.903p/kWh\n05:30, action: action_when_cheap, price: -1.134p/kWh\n06:00, action: action_when_expensive, price: 0.336p/kWh\n06:30, action: action_when_expensive, price: 2.1p/kWh\n07:00, action: action_when_expensive, price: 4.2p/kWh\n07:30, action: action_when_expensive, price: 3.78p/kWh\n08:00, action: action_when_cheap, price: -1.05p/kWh\n08:30, action: action_when_expensive, price: 4.578p/kWh\n09:00, action: action_when_cheap, price: -1.26p/kWh\n09:30, action: action_when_expensive, price: 7.707p/kWh\n10:00, action: action_when_expensive, price: 3.99p/kWh\n10:30, action: action_when_expensive, price: 6.9825p/kWh\n11:00, action: action_when_expensive, price: 6.6255p/kWh\n11:30, action: action_when_expensive, price: 15.162p/kWh\n12:00, action: action_when_expensive, price: 18.9p/kWh\n12:30, action: action_when_expensive, price: 19.866p/kWh\n13:00, action: action_when_expensive, price: 19.95p/kWh\n13:30, action: action_when_expensive, price: 19.152p/kWh\n14:00, action: action_when_expensive, price: 19.74p/kWh\n14:30, action: action_when_expensive, price: 22.47p/kWh\n15:00, action: action_when_expensive, price: 20.16p/kWh\n15:30, action: action_when_expensive, price: 20.58p/kWh\n16:00, action: action_when_expensive, price: 34.923p/kWh\n16:30, action: action_when_expensive, price: 36.54p/kWh\n17:00, action: action_when_expensive, price: 38.6925p/kWh\n17:30, action: action_when_expensive, price: 38.136p/kWh\n18:00, action: action_when_expensive, price: 38.1255p/kWh\n18:30, action: action_when_expensive, price: 37.2855p/kWh\n19:00, action: action_when_expensive, price: 24.633p/kWh\n19:30, action: action_when_expensive, price: 21.735p/kWh\n20:00, action: action_when_expensive, price: 23.52p/kWh\n20:30, action: action_when_expensive, price: 19.74p/kWh\n21:00, action: action_when_expensive, price: 20.58p/kWh\n21:30, action: action_when_expensive, price: 20.37p/kWh\n22:00, action: action_when_expensive, price: 20.16p/kWh\n22:30, action: action_when_expensive, price: 13.65p/kWh\nINFO Schedule generated, waiting for jobs to run... \n</code></pre> \u2190 Previous Next \u2192"}]}